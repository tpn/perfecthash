[
  {
    "objectID": "syntax-highlighter-test.html",
    "href": "syntax-highlighter-test.html",
    "title": "Test Syntax Highlighting",
    "section": "",
    "text": "Assembly Slim (fasm)Assembly Slim (asm)Assembly Full (asm)Assembly Full (fasm)CDiff AsmIACA\n\n\nmov      rax,  String.Buffer[rdx]                   ; Load address of string buffer.\nvpbroadcastb xmm4, byte ptr String.Length[rdx]      ; Broadcast string length.\nvmovdqa  xmm3, xmmword ptr StringTable.Lengths[rcx] ; Load table lengths.\nvmovdqu  xmm0, xmmword ptr [rax]                    ; Load string buffer.\nvpcmpgtb xmm1, xmm3, xmm4                           ; Identify slots &gt; string len.\nvpshufb  xmm5, xmm0, StringTable.UniqueIndex[rcx]   ; Rearrange string by unique index.\nvpcmpeqb xmm5, xmm5, StringTable.UniqueChars[rcx]   ; Compare rearranged to unique.\nvptest   xmm1, xmm5                                 ; Unique slots AND (!long slots).\njnc      short Pfx10                                ; CY=0, continue with routine.\nxor      eax, eax                                   ; CY=1, no match.\nnot      al                                         ; al = -1 (NO_MATCH_FOUND).\nret                                                 ; Return NO_MATCH_FOUND.\n\n\nmov      rax,  String.Buffer[rdx]                   ; Load address of string buffer.\nvpbroadcastb xmm4, byte ptr String.Length[rdx]      ; Broadcast string length.\nvmovdqa  xmm3, xmmword ptr StringTable.Lengths[rcx] ; Load table lengths.\nvmovdqu  xmm0, xmmword ptr [rax]                    ; Load string buffer.\nvpcmpgtb xmm1, xmm3, xmm4                           ; Identify slots &gt; string len.\nvpshufb  xmm5, xmm0, StringTable.UniqueIndex[rcx]   ; Rearrange string by unique index.\nvpcmpeqb xmm5, xmm5, StringTable.UniqueChars[rcx]   ; Compare rearranged to unique.\nvptest   xmm1, xmm5                                 ; Unique slots AND (!long slots).\njnc      short Pfx10                                ; CY=0, continue with routine.\nxor      eax, eax                                   ; CY=1, no match.\nnot      al                                         ; al = -1 (NO_MATCH_FOUND).\nret                                                 ; Return NO_MATCH_FOUND.\n\n\n;++\n;\n; STRING_TABLE_INDEX\n; IsPrefixOfStringInTable_x64_*(\n;     _In_ PSTRING_TABLE StringTable,\n;     _In_ PSTRING String,\n;     _Out_opt_ PSTRING_MATCH Match\n;     )\n;\n; Routine Description:\n;\n;   Searches a string table to see if any strings \"prefix match\" the given\n;   search string.  That is, whether any string in the table \"starts with\n;   or is equal to\" the search string.\n;\n; Arguments:\n;\n;   StringTable - Supplies a pointer to a STRING_TABLE struct.\n;\n;   String - Supplies a pointer to a STRING struct that contains the string to\n;       search for.\n;\n;   Match - Optionally supplies a pointer to a variable that contains the\n;       address of a STRING_MATCH structure.  This will be populated with\n;       additional details about the match if a non-NULL pointer is supplied.\n;\n; Return Value:\n;\n;   Index of the prefix match if one was found, NO_MATCH_FOUND if not.\n;\n;--\n\n        LEAF_ENTRY IsPrefixOfStringInTable_x64_1, _TEXT$00\n\n        ;IACA_VC_START\n\n;\n; Load the string buffer into xmm0, and the unique indexes from the string table\n; into xmm1.  Shuffle the buffer according to the unique indexes, and store the\n; result back into xmm0.\n;\n\n        mov     rax, String.Buffer[rdx]\n        vmovdqu xmm0, xmmword ptr [rax]                 ; Load search buffer.\n        vmovdqa xmm1, xmmword ptr StringTable.UniqueIndex[rcx] ; Load indexes.\n        vpshufb xmm0, xmm0, xmm1\n\n;\n; Load the string table's unique character array into xmm2, and the lengths for\n; each string slot into xmm3.\n;\n\n        vmovdqa xmm2, xmmword ptr StringTable.UniqueChars[rcx]  ; Load chars.\n        vmovdqa xmm3, xmmword ptr StringTable.Lengths[rcx]      ; Load lengths.\n\n;\n; Set xmm5 to all ones.  This is used later.\n;\n\n        vpcmpeqq    xmm5, xmm5, xmm5                    ; Set xmm5 to all ones.\n\n;\n; Broadcast the byte-sized string length into xmm4.\n;\n\n        vpbroadcastb xmm4, byte ptr String.Length[rdx]  ; Broadcast length.\n\n;\n; Compare the search string's unique character array (xmm0) against the string\n; table's unique chars (xmm2), saving the result back into xmm0.\n;\n\n        vpcmpeqb    xmm0, xmm0, xmm2            ; Compare unique chars.\n\n;\n; Compare the search string's length, which we've broadcasted to all 8-byte\n; elements of the xmm4 register, to the lengths of the slots in the string\n; table, to find those that are greater in length.  Invert the result, such\n; that we're left with a masked register where each 0xff element indicates\n; a slot with a length less than or equal to our search string's length.\n;\n\n        vpcmpgtb    xmm1, xmm4, xmm3            ; Identify long slots.\n        vpxor       xmm1, xmm1, xmm5            ; Invert the result.\n\n;\n; Intersect-via-test xmm0 and xmm1 to identify string slots of a suitable\n; length with a matching unique character.\n;\n\n        vptest      xmm0, xmm1                  ; Check for no match.\n        ;jnz        short @F                    ; There was a match.\n                                                ; (Not yet implemented.)\n\n;\n; No match, set rax to -1 and return.\n;\n\n        xor         eax, eax                    ;\n        not         al                          ; rax = -1\n        ret\n\n        ;IACA_VC_END\n        LEAF_END   IsPrefixOfStringInTable_x64_1, _TEXT$00\n\n; vim:set tw=80 ts=8 sw=4 sts=4 et syntax=masm fo=croql comments=\\:;           :\n\n\n;++\n;\n; STRING_TABLE_INDEX\n; IsPrefixOfStringInTable_x64_*(\n;     _In_ PSTRING_TABLE StringTable,\n;     _In_ PSTRING String,\n;     _Out_opt_ PSTRING_MATCH Match\n;     )\n;\n; Routine Description:\n;\n;   Searches a string table to see if any strings \"prefix match\" the given\n;   search string.  That is, whether any string in the table \"starts with\n;   or is equal to\" the search string.\n;\n; Arguments:\n;\n;   StringTable - Supplies a pointer to a STRING_TABLE struct.\n;\n;   String - Supplies a pointer to a STRING struct that contains the string to\n;       search for.\n;\n;   Match - Optionally supplies a pointer to a variable that contains the\n;       address of a STRING_MATCH structure.  This will be populated with\n;       additional details about the match if a non-NULL pointer is supplied.\n;\n; Return Value:\n;\n;   Index of the prefix match if one was found, NO_MATCH_FOUND if not.\n;\n;--\n\n        LEAF_ENTRY IsPrefixOfStringInTable_x64_1, _TEXT$00\n\n        ;IACA_VC_START\n\n;\n; Load the string buffer into xmm0, and the unique indexes from the string table\n; into xmm1.  Shuffle the buffer according to the unique indexes, and store the\n; result back into xmm0.\n;\n\n        mov     rax, String.Buffer[rdx]\n        vmovdqu xmm0, xmmword ptr [rax]                 ; Load search buffer.\n        vmovdqa xmm1, xmmword ptr StringTable.UniqueIndex[rcx] ; Load indexes.\n        vpshufb xmm0, xmm0, xmm1\n\n;\n; Load the string table's unique character array into xmm2, and the lengths for\n; each string slot into xmm3.\n;\n\n        vmovdqa xmm2, xmmword ptr StringTable.UniqueChars[rcx]  ; Load chars.\n        vmovdqa xmm3, xmmword ptr StringTable.Lengths[rcx]      ; Load lengths.\n\n;\n; Set xmm5 to all ones.  This is used later.\n;\n\n        vpcmpeqq    xmm5, xmm5, xmm5                    ; Set xmm5 to all ones.\n\n;\n; Broadcast the byte-sized string length into xmm4.\n;\n\n        vpbroadcastb xmm4, byte ptr String.Length[rdx]  ; Broadcast length.\n\n;\n; Compare the search string's unique character array (xmm0) against the string\n; table's unique chars (xmm2), saving the result back into xmm0.\n;\n\n        vpcmpeqb    xmm0, xmm0, xmm2            ; Compare unique chars.\n\n;\n; Compare the search string's length, which we've broadcasted to all 8-byte\n; elements of the xmm4 register, to the lengths of the slots in the string\n; table, to find those that are greater in length.  Invert the result, such\n; that we're left with a masked register where each 0xff element indicates\n; a slot with a length less than or equal to our search string's length.\n;\n\n        vpcmpgtb    xmm1, xmm4, xmm3            ; Identify long slots.\n        vpxor       xmm1, xmm1, xmm5            ; Invert the result.\n\n;\n; Intersect-via-test xmm0 and xmm1 to identify string slots of a suitable\n; length with a matching unique character.\n;\n\n        vptest      xmm0, xmm1                  ; Check for no match.\n        ;jnz        short @F                    ; There was a match.\n                                                ; (Not yet implemented.)\n\n;\n; No match, set rax to -1 and return.\n;\n\n        xor         eax, eax                    ;\n        not         al                          ; rax = -1\n        ret\n\n        ;IACA_VC_END\n\n        LEAF_END   IsPrefixOfStringInTable_x64_1, _TEXT$00\n\n; vim:set tw=80 ts=8 sw=4 sts=4 et syntax=masm fo=croql comments=\\:;           :\n\n\n_Use_decl_annotations_\nSTRING_TABLE_INDEX\nIsPrefixOfStringInTable_11(\n    PSTRING_TABLE StringTable,\n    PSTRING String,\n    PSTRING_MATCH Match\n    )\n/*++\n\nRoutine Description:\n\n    Searches a string table to see if any strings \"prefix match\" the given\n    search string.  That is, whether any string in the table \"starts with\n    or is equal to\" the search string.\n\n    This version is based off version 10, but with the vpandn used at the\n    end of the initial test, as suggested by Wojciech Mula (@pshufb).\n\nArguments:\n\n    StringTable - Supplies a pointer to a STRING_TABLE struct.\n\n    String - Supplies a pointer to a STRING struct that contains the string to\n        search for.\n\n    Match - Optionally supplies a pointer to a variable that contains the\n        address of a STRING_MATCH structure.  This will be populated with\n        additional details about the match if a non-NULL pointer is supplied.\n\nReturn Value:\n\n    Index of the prefix match if one was found, NO_MATCH_FOUND if not.\n\n--*/\n{\n    ULONG Bitmap;\n    ULONG Mask;\n    ULONG Count;\n    ULONG Length;\n    ULONG Index;\n    ULONG Shift = 0;\n    ULONG CharactersMatched;\n    ULONG NumberOfTrailingZeros;\n    ULONG SearchLength;\n    PSTRING TargetString;\n    STRING_SLOT Slot;\n    STRING_SLOT Search;\n    STRING_SLOT Compare;\n    SLOT_LENGTHS Lengths;\n    XMMWORD LengthXmm;\n    XMMWORD UniqueChar;\n    XMMWORD TableUniqueChars;\n    XMMWORD IncludeSlotsByUniqueChar;\n    XMMWORD IgnoreSlotsByLength;\n    XMMWORD IncludeSlots;\n\n    //\n    // Unconditionally do the following five operations before checking any of\n    // the results and determining how the search should proceed:\n    //\n    //  1. Load the search string into an Xmm register, and broadcast the\n    //     character indicated by the unique character index (relative to\n    //     other strings in the table) across a second Xmm register.\n    //\n    //  2. Load the string table's unique character array into an Xmm register.\n    //\n    //  3. Broadcast the search string's length into an XMM register.\n    //\n    //  3. Load the string table's slot lengths array into an XMM register.\n    //\n    //  4. Compare the unique character from step 1 to the string table's unique\n    //     character array set up in step 2.  The result of this comparison\n    //     will produce an XMM register with each byte set to either 0xff if\n    //     the unique character was found, or 0x0 if it wasn't.\n    //\n    //  5. Compare the search string's length from step 3 to the string table's\n    //     slot length array set up in step 3.  This allows us to identify the\n    //     slots that have strings that are of lesser or equal length to our\n    //     search string.  As we're doing a prefix search, we can ignore any\n    //     slots longer than our incoming search string.\n    //\n    // We do all five of these operations up front regardless of whether or not\n    // they're strictly necessary.  That is, if the unique character isn't in\n    // the unique character array, we don't need to load array lengths -- and\n    // vice versa.  However, we assume the benefits afforded by giving the CPU\n    // a bunch of independent things to do unconditionally up-front outweigh\n    // the cost of putting in branches and conditionally loading things if\n    // necessary.\n    //\n\n    //\n    // Load the first 16-bytes of the search string into an XMM register.\n    //\n\n    Search.CharsXmm = _mm_loadu_si128((PXMMWORD)String-&gt;Buffer);\n\n    //\n    // Broadcast the search string's unique characters according to the string\n    // table's unique character index.\n    //\n\n    UniqueChar = _mm_shuffle_epi8(Search.CharsXmm,\n                                  StringTable-&gt;UniqueIndex.IndexXmm);\n\n    //\n    // Load the slot length array into an XMM register.\n    //\n\n    Lengths.SlotsXmm = _mm_load_si128(&StringTable-&gt;Lengths.SlotsXmm);\n\n    //\n    // Load the string table's unique character array into an XMM register.\n    //\n\n    TableUniqueChars = _mm_load_si128(&StringTable-&gt;UniqueChars.CharsXmm);\n\n    //\n    // Broadcast the search string's length into an XMM register.\n    //\n\n    LengthXmm.m128i_u8[0] = (BYTE)String-&gt;Length;\n    LengthXmm = _mm_broadcastb_epi8(LengthXmm);\n\n    //\n    // Compare the search string's unique character with all of the unique\n    // characters of strings in the table, saving the results into an XMM\n    // register.  This comparison will indicate which slots we can ignore\n    // because the characters at a given index don't match.  Matched slots\n    // will be 0xff, unmatched slots will be 0x0.\n    //\n\n    IncludeSlotsByUniqueChar = _mm_cmpeq_epi8(UniqueChar, TableUniqueChars);\n\n    //\n    // Find all slots that are longer than the incoming string length, as these\n    // are the ones we're going to exclude from any prefix match.\n    //\n    // N.B. Because we default the length of empty slots to 0x7f, they will\n    //      handily be included in the ignored set (i.e. their words will also\n    //      be set to 0xff), which means they'll also get filtered out when\n    //      we do the \"and not\" intersection with the include slots next.\n    //\n\n    IgnoreSlotsByLength = _mm_cmpgt_epi8(Lengths.SlotsXmm, LengthXmm);\n\n    //\n    // We're now ready to intersect the two XMM registers to determine which\n    // slots should still be included in the comparison (i.e. which slots have\n    // the exact same unique character as the string and a length less than or\n    // equal to the length of the search string).\n    //\n    // As the IgnoreSlotsByLength XMM register is the inverse of what we want\n    // at the moment (we want 0xff for slots to include, and 0x00 for slots\n    // to ignore; it's currently the other way around), we use _mm_andnot_si128\n    // instead of just _mm_and_si128.\n    //\n\n    IncludeSlots = _mm_andnot_si128(IgnoreSlotsByLength,\n                                    IncludeSlotsByUniqueChar);\n\n    //\n    // Generate a mask.\n    //\n\n    Bitmap = _mm_movemask_epi8(IncludeSlots);\n\n    if (!Bitmap) {\n\n        //\n        // No bits were set, so there are no strings in this table starting\n        // with the same character and of a lesser or equal length as the\n        // search string.\n        //\n\n        return NO_MATCH_FOUND;\n    }\n\n    //\n    // Calculate the \"search length\" of the incoming string, which ensures we\n    // only compare up to the first 16 characters.\n    //\n\n    SearchLength = min(String-&gt;Length, 16);\n\n    //\n    // A popcount against the mask will tell us how many slots we matched, and\n    // thus, need to compare.\n    //\n\n    Count = __popcnt(Bitmap);\n\n    do {\n\n        //\n        // Extract the next index by counting the number of trailing zeros left\n        // in the bitmap and adding the amount we've already shifted by.\n        //\n\n        NumberOfTrailingZeros = _tzcnt_u32(Bitmap);\n        Index = NumberOfTrailingZeros + Shift;\n\n        //\n        // Shift the bitmap right, past the zeros and the 1 that was just found,\n        // such that it's positioned correctly for the next loop's tzcnt. Update\n        // the shift count accordingly.\n        //\n\n        Bitmap &gt;&gt;= (NumberOfTrailingZeros + 1);\n        Shift = Index + 1;\n\n        //\n        // Load the slot and its length.\n        //\n\n        Slot.CharsXmm = _mm_load_si128(&StringTable-&gt;Slots[Index].CharsXmm);\n        Length = Lengths.Slots[Index];\n\n        //\n        // Compare the slot to the search string.\n        //\n\n        Compare.CharsXmm = _mm_cmpeq_epi8(Slot.CharsXmm, Search.CharsXmm);\n\n        //\n        // Create a mask of the comparison, then filter out high bits from the\n        // search string's length (which is capped at 16).  (This shouldn't be\n        // technically necessary as the string array buffers should have been\n        // calloc'd and zeroed, but optimizing compilers can often ignore the\n        // zeroing request -- which can produce some bizarre results where the\n        // debug build is correct (because the buffers were zeroed) but the\n        // release build fails because the zeroing got ignored and there are\n        // junk bytes past the NULL terminator, which get picked up in our\n        // 128-bit loads.)\n        //\n\n        Mask = _bzhi_u32(_mm_movemask_epi8(Compare.CharsXmm), SearchLength);\n\n        //\n        // Count how many characters matched.\n        //\n\n        CharactersMatched = __popcnt(Mask);\n\n        if ((USHORT)CharactersMatched &lt; Length && Length &lt;= 16) {\n\n            //\n            // The slot length is longer than the number of characters matched\n            // from the search string; this isn't a prefix match.  Continue.\n            //\n\n            continue;\n        }\n\n        if (Length &gt; 16) {\n\n            //\n            // The first 16 characters in the string matched against this\n            // slot, and the slot is oversized (longer than 16 characters),\n            // so do a direct comparison between the remaining buffers.\n            //\n\n            TargetString = &StringTable-&gt;pStringArray-&gt;Strings[Index];\n\n            CharactersMatched = IsPrefixMatch(String, TargetString, 16);\n\n            if (CharactersMatched == NO_MATCH_FOUND) {\n\n                //\n                // The prefix match failed, continue our search.\n                //\n\n                continue;\n            }\n        }\n\n        //\n        // This slot is a prefix match.  Fill out the Match structure if the\n        // caller provided a non-NULL pointer, then return the index of the\n        // match.\n        //\n\n        if (ARGUMENT_PRESENT(Match)) {\n\n            Match-&gt;Index = (BYTE)Index;\n            Match-&gt;NumberOfMatchedCharacters = (BYTE)CharactersMatched;\n            Match-&gt;String = &StringTable-&gt;pStringArray-&gt;Strings[Index];\n\n        }\n\n        return (STRING_TABLE_INDEX)Index;\n\n    } while (--Count);\n\n    //\n    // If we get here, we didn't find a match.\n    //\n\n    //IACA_VC_END();\n\n    return NO_MATCH_FOUND;\n}\n\n\n% diff -u IsPrefixOfStringInTable_x64_2.asm IsPrefixOfStringInTable_x64_4.asm\n--- IsPrefixOfStringInTable_x64_2.asm   2018-04-26 14:15:53.805409700 -0400\n+++ IsPrefixOfStringInTable_x64_4.asm   2018-04-26 14:16:37.909717200 -0400\n@@ -33,6 +33,10 @@\n ;   search string.  That is, whether any string in the table \"starts with\n ;   or is equal to\" the search string.\n ;\n+;   This routine is based off version 2, but leverages the fact that\n+;   vptest sets the carry flag if '(xmm0 and (not xmm1))' evaluates\n+;   to all 0s, avoiding the the need to do the pxor or pandn steps.\n+;\n ; Arguments:\n ;\n ;   StringTable - Supplies a pointer to a STRING_TABLE struct.\n@@ -50,7 +54,7 @@\n ;\n ;--\n\n-        LEAF_ENTRY IsPrefixOfStringInTable_x64_2, _TEXT$00\n+        LEAF_ENTRY IsPrefixOfStringInTable_x64_4, _TEXT$00\n\n ;\n ; Load the string buffer into xmm0, and the unique indexes from the string table\n@@ -83,12 +87,6 @@\n         vmovdqa xmm3, xmmword ptr StringTable.Lengths[rcx]      ; Load lengths.\n\n ;\n-; Set xmm2 to all ones.  We use this later to invert the length comparison.\n-;\n-\n-        vpcmpeqq    xmm2, xmm2, xmm2            ; Set xmm2 to all ones.\n-\n-;\n ; Broadcast the byte-sized string length into xmm4.\n ;\n\n@@ -103,16 +101,16 @@\n ;\n\n         vpcmpgtb    xmm1, xmm3, xmm4            ; Identify long slots.\n-        vpxor       xmm1, xmm1, xmm2            ; Invert the result.\n\n ;\n ; Intersect-and-test the unique character match xmm mask register (xmm5) with\n-; the length match mask xmm register (xmm1).  This affects flags, allowing us\n-; to do a fast-path exit for the no-match case (where ZF = 1).\n+; the inverted length match mask xmm register (xmm1).  This will set the carry\n+; flag (CY = 1) if the result of 'xmm5 and (not xmm1)' is all 0s, which allows\n+; us to do a fast-path exit for the no-match case.\n ;\n\n-        vptest      xmm5, xmm1                  ; Check for no match.\n-        jnz         short Pfx10                 ; There was a match.\n+        vptest      xmm1, xmm5                  ; Check for no match.\n+        jnc         short Pfx10                 ; There was a match.\n\n ;\n ; No match, set rax to -1 and return.\n@@ -159,12 +157,12 @@\n         vpinsrq     xmm2, xmm2, rdx, 1          ; Save rdx into xmm2q[1].\n\n ;\n-; Intersect xmm5 and xmm1 (as we did earlier with the 'vptest xmm5, xmm1'),\n+; Intersect xmm5 and xmm1 (as we did earlier with the 'vptest xmm1, xmm5'),\n ; yielding a mask identifying indices we need to perform subsequent matches\n ; upon.  Convert this into a bitmap and save in xmm2d[2].\n ;\n\n-        vpand       xmm5, xmm5, xmm1            ; Intersect unique + lengths.\n+        vpandn      xmm5, xmm1, xmm5            ; Intersect unique + lengths.\n         vpmovmskb   edx, xmm5                   ; Generate a bitmap from mask.\n\n ;\n@@ -473,7 +471,7 @@\n\n         ;IACA_VC_END\n\n-        LEAF_END   IsPrefixOfStringInTable_x64_2, _TEXT$00\n+        LEAF_END   IsPrefixOfStringInTable_x64_4, _TEXT$00\n\n ; vim:set tw=80 ts=8 sw=4 sts=4 et syntax=masm fo=croql comments=\\:;           :\n\n\nS:\\Source\\tracer&gt;iaca x64\\Release\\StringTable2.dll\nIntel(R) Architecture Code Analyzer\nVersion -  v3.0-28-g1ba2cbb build date: 2017-10-23;17:30:24\nAnalyzed File -  x64\\Release\\StringTable2.dll\nBinary Format - 64Bit\nArchitecture  -  SKL\nAnalysis Type - Throughput\n\nThroughput Analysis Report\n--------------------------\nBlock Throughput: 3.48 Cycles       Throughput Bottleneck: FrontEnd\nLoop Count:  24\nPort Binding In Cycles Per Iteration:\n----------------------------------------------------------------------------\n| Port   |  0  - DV  |  1  |  2  - D   |  3  - D   |  4  |  5  |  6  |  7  |\n----------------------------------------------------------------------------\n| Cycles | 2.0   0.0 | 1.0 | 3.5   3.5 | 3.5   3.5 | 0.0 | 3.0 | 2.0 | 0.0 |\n----------------------------------------------------------------------------\n\nDV - Divider pipe (on port 0)\nD - Data fetch pipe (on ports 2 and 3)\n* - instruction micro-ops not bound to a port\n^ - Micro Fusion occurred\n\n|    | Ports pressure in cycles        | |\n|μops|0DV| 1 | 2 - D | 3 - D |4| 5 | 6 |7|\n-------------------------------------------\n| 1  |   |   |0.5 0.5|0.5 0.5| |   |   | | mov rax, qword ptr [rdx+0x8]\n| 2  |   |   |0.5 0.5|0.5 0.5| |1.0|   | | vpbroadcastb xmm4, byte ptr [rdx]\n| 1  |   |   |0.5 0.5|0.5 0.5| |   |   | | vmovdqa xmm3, xmmword ptr [rcx+0x20]\n| 1  |   |   |0.5 0.5|0.5 0.5| |   |   | | vmovdqu xmm0, xmmword ptr [rax]\n| 1  |1.0|   |       |       | |   |   | | vpcmpgtb xmm1, xmm3, xmm4\n| 2^ |   |   |0.5 0.5|0.5 0.5| |1.0|   | | vpshufb xmm5, xmm0, xmmword ptr [rcx+0x10]\n| 2^ |   |1.0|0.5 0.5|0.5 0.5| |   |   | | vpcmpeqb xmm5, xmm5, xmmword ptr [rcx]\n| 2  |1.0|   |       |       | |1.0|   | | vptest xmm1, xmm5\n| 1  |   |   |       |       | |   |1.0| | jnb 0x10\n| 1* |   |   |       |       | |   |   | | xor eax, eax\n| 1  |   |   |       |       | |   |1.0| | not al\n| 3^ |   |   |0.5 0.5|0.5 0.5| |   |   | | ret\nTotal Num Of μops: 18"
  },
  {
    "objectID": "functions/index.html",
    "href": "functions/index.html",
    "title": "Hash Functions",
    "section": "",
    "text": "Contents\n   \n  \n  MultiplyShiftR\n  MultiplyShiftRX\n  \n\n\nMultiplyShiftR\n\nSlimExpanded\n\n\nuint32_t\nIndexMultiplyShiftR(\n    uint32_t Key\n    )\n{\n    uint32_t Vertex1;\n    uint32_t Vertex2;\n\n    Vertex1 = ((Key * SEED1) &gt;&gt; SEED3_BYTE1) & HASH_MASK;\n    Vertex2 = ((Key * SEED2) &gt;&gt; SEED3_BYTE2) & HASH_MASK;\n\n    return (Assigned[Vertex1] + Assigned[Vertex2]) & INDEX_MASK;\n}\n\n\n#include &lt;stdint.h&gt;\n\n#define SEED1 0x20190903\n#define SEED2 0x19811025\n#define SEED3_BYTE1 0x10\n#define SEED3_BYTE2 0x7\n#define HASH_MASK (uint32_t)0xffff\n#define INDEX_MASK (uint32_t)0x7fff\n\nextern uint32_t Assigned[];\n\nuint32_t\nIndexMultiplyShiftR(\n    uint32_t Key\n    )\n{\n    uint32_t Vertex1;\n    uint32_t Vertex2;\n\n    Vertex1 = (((Key * SEED1) &gt;&gt; SEED3_BYTE1) & HASH_MASK;\n    Vertex2 = (((Key * SEED2) &gt;&gt; SEED3_BYTE2) & HASH_MASK;\n\n    return (Assigned[Vertex1] + Assigned[Vertex2]) & INDEX_MASK;\n}\n\n\n\n\n\nMultiplyShiftRX\n\nSlimExpandedAssemblyLLVM MCA\n\n\nuint32_t\nIndexMultiplyShiftRX(\n    uint32_t Key\n    )\n{\n    uint32_t Vertex1;\n    uint32_t Vertex2;\n\n    Vertex1 = ((Key * SEED1) &gt;&gt; SEED3_BYTE1);\n    Vertex2 = ((Key * SEED2) &gt;&gt; SEED3_BYTE2);\n\n    return (Assigned[Vertex1] + Assigned[Vertex2]) & INDEX_MASK;\n}\n\n\n#include &lt;stdint.h&gt;\n\n#define SEED1 0x20190903\n#define SEED2 0x19811025\n#define SEED3_BYTE1 0x10\n#define SEED3_BYTE2 0x7\n#define INDEX_MASK (uint32_t)0x7fff\n\nextern uint32_t Assigned[];\n\nuint32_t\nIndexMultiplyShiftRX(\n    uint32_t Key\n    )\n{\n    uint32_t Vertex1;\n    uint32_t Vertex2;\n\n    Vertex1 = ((Key * SEED1) &gt;&gt; SEED3_BYTE1);\n    Vertex2 = ((Key * SEED2) &gt;&gt; SEED3_BYTE2);\n\n    return (Assigned[Vertex1] + Assigned[Vertex2]) & INDEX_MASK;\n}\n\n\n\nIndexMultiplyShiftRX(unsigned int):\n        imul    ecx, edi, 538511619\n        imul    eax, edi, 427888677\n        shr     ecx, 16\n        lea     rdx, [rip + Assigned]\n        shr     eax, 7\n        mov     eax, dword ptr [rdx + 4*rax]\n        add     eax, dword ptr [rdx + 4*rcx]\n        and     eax, 32767\n        ret\n\n\nIterations:        100\nInstructions:      1400\nTotal Cycles:      413\nTotal uOps:        1600\n\nDispatch Width:    4\nuOps Per Cycle:    3.87\nIPC:               3.39\nBlock RThroughput: 4.0\n\n\nInstruction Info:\n[1]: #uOps\n[2]: Latency\n[3]: RThroughput\n[4]: MayLoad\n[5]: MayStore\n[6]: HasSideEffects (U)\n\n[1]    [2]    [3]    [4]    [5]    [6]    Instructions:\n 1      3     1.00                        imul  ecx, edi, 538511619\n 1      3     1.00                        imul  eax, edi, 427888677\n 1      1     0.50                        shr   ecx, 16\n 1      1     0.50                        lea   rdx, [rip + Assigned]\n 1      1     0.50                        shr   eax, 7\n 1      5     0.50    *                   mov   eax, dword ptr [rdx + 4*rax]\n 2      6     0.50    *                   add   eax, dword ptr [rdx + 4*rcx]\n 1      1     0.33                        and   eax, 32767\n 1      1     1.00                  U     ret\n 1      1     0.50                        lea   rax, [rip + Assigned]\n 1      5     0.50    *                   mov   eax, dword ptr [rax + 79726608]\n 2      6     0.50    *                   add   eax, dword ptr [rip + Assigned+1600]\n 1      1     0.33                        and   eax, 32767\n 1      1     1.00                  U     ret\n\n\nResources:\n[0]   - SBDivider\n[1]   - SBFPDivider\n[2]   - SBPort0\n[3]   - SBPort1\n[4]   - SBPort4\n[5]   - SBPort5\n[6.0] - SBPort23\n[6.1] - SBPort23\n\n\nResource pressure per iteration:\n[0]    [1]    [2]    [3]    [4]    [5]    [6.0]  [6.1]  \n -      -     3.99   4.01    -     4.00   2.00   2.00   \n\nResource pressure by instruction:\n[0]    [1]    [2]    [3]    [4]    [5]    [6.0]  [6.1]  Instructions:\n -      -      -     1.00    -      -      -      -     imul    ecx, edi, 538511619\n -      -      -     1.00    -      -      -      -     imul    eax, edi, 427888677\n -      -     0.74    -      -     0.26    -      -     shr ecx, 16\n -      -     0.76   0.24    -      -      -      -     lea rdx, [rip + Assigned]\n -      -     0.04    -      -     0.96    -      -     shr eax, 7\n -      -      -      -      -      -      -     1.00   mov eax, dword ptr [rdx + 4*rax]\n -      -     0.28   0.01    -     0.71   1.00    -     add eax, dword ptr [rdx + 4*rcx]\n -      -     0.93   0.04    -     0.03    -      -     and eax, 32767\n -      -      -      -      -     1.00    -      -     ret\n -      -     0.27   0.73    -      -      -      -     lea rax, [rip + Assigned]\n -      -      -      -      -      -      -     1.00   mov eax, dword ptr [rax + 79726608]\n -      -     0.03   0.96    -     0.01   1.00    -     add eax, dword ptr [rip + Assigned+1600]\n -      -     0.94   0.03    -     0.03    -      -     and eax, 32767\n -      -      -      -      -     1.00    -      -     ret"
  },
  {
    "objectID": "documentation/index.html",
    "href": "documentation/index.html",
    "title": "Documentation",
    "section": "",
    "text": "TODO."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Perfect Hash",
    "section": "",
    "text": "Trent Nelson’s Perfect Hash Project.\nWork in progress.\nContact: trent@trent.me."
  }
]